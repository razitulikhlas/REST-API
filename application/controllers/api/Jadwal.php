<?php
use Restserver\Libraries\REST_Controller;
defined('BASEPATH') OR exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */

//To Solve File REST_Controller not found
require APPPATH . 'libraries/REST_Controller.php';
require APPPATH . 'libraries/Format.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Jadwal extends CI_Controller {

    use REST_Controller {
        REST_Controller::__construct as private __resTraitConstruct;
    }

    public function __construct()
    {
        // Construct the parent class
        parent::__construct();
        $this->load->model('Jadwal_model','jadwal');
        $this->__resTraitConstruct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function index_get()
    {
        $kd = $this->get('kd_jadwal');
        if($kd === null ){
            $jadwal = $this->jadwal->getJadwal();
        }else{
            $jadwal = $this->jadwal->getJadwal($kd);
        }
        

        if($jadwal){
            $this->response([
                'status' => true,
                'data' => $jadwal
            ], 200);
        }else{
            $this->response([
                'status' => false,
                'message' => 'kd not found'
            ], 404);
        }
      
    }

    public function index_delete(){
        $kd = $this->delete('kd_jadwal');

        if( $kd === null){
            $this->response([
                'status' => false,
                'message' => 'kd tidak boleh kosong'
            ], 400);
        }else{
            if($this->jadwal->deleteJadwal($kd) > 0){
                // ok
                $this->response([
                    'status' => true,
                    'message' => 'data berhasil di hapus'
                ], 200);
            }else{
                $this->response([
                    'status' => false,
                    'message' => 'kd not found'
                ], 400);
            }
        }
    }

    public function index_post(){
        $kd_jadwal 	 = $this->post('kd_jadwal');
		$kd_poli 	 = $this->post('kd_poli');	
		$kd_dokter	 = $this->post('kd_dokter');
		$waktu 		 = $this->post('waktu');
		$tanggal	 = $this->post('tanggal');
		$status 	 = $this->post('status');
		$keterangan	 = $this->post('keterangan');

        
        $data = [
            'kd_jadwal'	 => $kd_jadwal,
            'kd_poli'	 => $kd_poli,
            'kd_dokter'	 => $kd_dokter,
            'waktu'		 => $waktu,
            'tanggal'	 => $tanggal,
            'status'	 => $status,
            'keterangan' => $keterangan
        ];

        if($this->jadwal->createJadwal($data) > 0){
            $this->response([
                'status' => true,
                'message' => 'data berhasil di tambahkan'
            ], 201);
        }else{
            $this->response([
                'status' => false,
                'message' => 'data gagal ditambahkan'
            ], 400);
        }
    }


    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, 201); // CREATED (201) being the HTTP response code
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0)
        {
            // Set the response and exit
            $this->response(null, 400); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, 204); // NO_CONTENT (204) being the HTTP response code
    }

}