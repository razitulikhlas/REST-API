<?php

use Restserver\Libraries\REST_Controller;

defined('BASEPATH') or exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */

//To Solve File REST_Controller not found
require APPPATH . 'libraries/REST_Controller.php';
require APPPATH . 'libraries/Format.php';

/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Otpverify extends CI_Controller
{

    use REST_Controller {
        REST_Controller::__construct as private __resTraitConstruct;
    }

    public function __construct()
    {
        // Construct the parent class
        parent::__construct();
        $this->load->model('loginpedagang_model', 'otp');
        $this->__resTraitConstruct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['users_get']['limit'] = 500; // 500 requests per hour per user/key
        $this->methods['users_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['users_delete']['limit'] = 50; // 50 requests per hour per user/key
    }

    public function index_put()
    {

        $nohp  = $this->put('nohp');
        $otp   = $this->put('otp');
        $token = $this->put('token');

        $otpdata  = array(
            'nohp_pedagang' => $nohp,
            'otp'           => $otp
        );

        // mencocokan otp di database dengan yang dimasukan pedagang
        $checkotp = $this->otp->verify($otpdata);
        if ($checkotp) {
            $where = array("nohp_pedagang" => $nohp);
            $data  = array(
                'token_fcm' => $token,
                'aktif'     => 1
            );

            // meng update token firebase pedagang di database
            $set_token = $this->otp->update($data, $where);
            if ($set_token) {
                $this->response([
                    'status' => true,
                    'message' => 'token berhasil di update'
                ], 201);
            } else {
                $this->response([
                    'status'  => false,
                    'error'   => [
                        "message"  => "gagal update token",
                        "code"     => "21"
                    ]
                ], 404);
            }
        } else {
            $this->response([
                'status'  => false,
                'error'   => [
                    "message"  => "Otp yang anda masukan salah",
                    "code"     => "20"
                ]
            ], 404);
        }
    }





    public function users_post()
    {
        // $this->some_model->update_user( ... );
        $message = [
            'id' => 100, // Automatically generated by the model
            'name' => $this->post('name'),
            'email' => $this->post('email'),
            'message' => 'Added a resource'
        ];

        $this->set_response($message, 201); // CREATED (201) being the HTTP response code
    }

    public function users_delete()
    {
        $id = (int) $this->get('id');

        // Validate the id.
        if ($id <= 0) {
            // Set the response and exit
            $this->response(null, 400); // BAD_REQUEST (400) being the HTTP response code
        }

        // $this->some_model->delete_something($id);
        $message = [
            'id' => $id,
            'message' => 'Deleted the resource'
        ];

        $this->set_response($message, 204); // NO_CONTENT (204) being the HTTP response code
    }
}
